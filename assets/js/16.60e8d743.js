(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{376:function(l,t,i){"use strict";i.r(t);var v=i(43),_=Object(v.a)({},(function(){var l=this,t=l.$createElement,i=l._self._c||t;return i("ContentSlotsDistributor",{attrs:{"slot-key":l.$parent.slotKey}},[i("h1",{attrs:{id:"html-加载与解析"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#html-加载与解析"}},[l._v("#")]),l._v(" HTML 加载与解析")]),l._v(" "),i("h2",{attrs:{id:"整体流程"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#整体流程"}},[l._v("#")]),l._v(" 整体流程")]),l._v(" "),i("ol",[i("li",[l._v("浏览器加载到的 HTML 文件，其实质就是一个包含字符串的文件；")]),l._v(" "),i("li",[l._v("浏览器会将 HTML 文件里的字符串读取到内存中，然后对字符串进行取词编译，将字符串转化成另一种数据结构；")]),l._v(" "),i("li",[l._v("浏览器会对转化后的数据结构自上而下进行分析：")])]),l._v(" "),i("ul",[i("li",[l._v("首先根据优先级，对所有的资源进行排序下载；")]),l._v(" "),i("li",[l._v("与此同时，渲染进程主线程会对文档进行解析：\n"),i("ul",[i("li",[l._v("遇到 DOM 标签时，执行 DOM 构建，将该 DOM 元素添加到 DOM 树中；")]),l._v(" "),i("li",[l._v("遇到script标签时，检查该 script 是否已经下载下来：\n"),i("ul",[i("li",[l._v("若是未下载完成，则等待下载完成（下载完立即执行代码），等待期间会阻塞其后 HTML 内容的解析；")]),l._v(" "),i("li",[l._v("若是已下载，便执行代码，执行代码期间也会阻塞其后 HTML 内容的解析；")]),l._v(" "),i("li",[l._v("总之，遇到script标签，一定会阻塞其后 HTML 内容的解析，直到文件加载完成并执行完成之后，才能继续解析其后的 HTML 内容；")])])]),l._v(" "),i("li",[l._v("遇到link标签时，检查link资源是否已下载：\n"),i("ul",[i("li",[l._v("若是已下载，则开始构建 CSSOM 树，同时继续解析其后的 HTML 内容")]),l._v(" "),i("li",[l._v("若是未下载完成，则继续解析其后的 HTML 内容")]),l._v(" "),i("li",[l._v("总之，无论link标签里的文件是否下载，都不会阻塞其后 HTML 内容的解析；但是因为 CSSOM 树还未构建完成，会阻塞页面渲染。")])])])])])])])}),[],!1,null,null,null);t.default=_.exports}}]);